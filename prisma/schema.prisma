// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String      @id @default(cuid())
  pubkey    String      @unique
  name      String?
  orders    Order[]
  // these are relay the user owns vs. is a moderator for
  relays    Relay[]
  moderator Moderator[]

  @@index([id])
}

model Order {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  relay        Relay     @relation(fields: [relayId], references: [id])
  relayId      String
  status       String    @db.VarChar(255)
  paid         Boolean   @default(false)
  payment_hash String    @db.VarChar(64)
  lnurl        String    @db.VarChar(1024)
  expires_at   DateTime?
  paid_at      DateTime?

  @@index([userId])
}

model Relay {
  id                     String      @id @default(cuid())
  name                   String      @db.VarChar(255)
  ownerId                String
  status                 String?     @db.VarChar(255)
  owner                  User        @relation(fields: [ownerId], references: [id])
  moderators             Moderator[]
  Order                  Order[]
  allow_list             AllowList?
  block_list             BlockList?
  details                String?     @db.Text
  domain                 String?     @db.VarChar(255)
  default_message_policy Boolean     @default(true)
  listed_in_directory    Boolean     @default(false)
  ip                     String?     @db.VarChar(255)
  capacity               Int?
  port                   Int?
  created_at             DateTime?
  profile_image          String?     @db.VarChar(2048)
  banner_image           String?     @db.VarChar(2048)

  @@index([ownerId])
}

model Moderator {
  id      String @id @default(cuid())
  relay   Relay  @relation(fields: relayId, references: [id])
  relayId String
  user    User   @relation(fields: userId, references: [id])
  userId  String
}

model AllowList {
  id            String             @id @default(cuid())
  relay         Relay              @relation(fields: [relayId], references: [id])
  relayId       String             @unique
  list_keywords ListEntryKeyword[]
  list_pubkeys  ListEntryPubkey[]
}

model BlockList {
  id            String             @id @default(cuid())
  relay         Relay              @relation(fields: [relayId], references: [id])
  relayId       String             @unique
  list_keywords ListEntryKeyword[]
  list_pubkeys  ListEntryPubkey[]
}

model ListEntryPubkey {
  id          String     @id @default(cuid())
  AllowList   AllowList? @relation(fields: [AllowListId], references: [id])
  AllowListId String?
  BlockList   BlockList? @relation(fields: [BlockListId], references: [id])
  BlockListId String?
  pubkey      String     @db.VarChar(255)
  reason      String?    @db.VarChar(255)
  expires_at  DateTime?
}

model ListEntryKeyword {
  id          String     @id @default(cuid())
  AllowList   AllowList? @relation(fields: [AllowListId], references: [id])
  AllowListId String?
  BlockList   BlockList? @relation(fields: [BlockListId], references: [id])
  BlockListId String?
  keyword     String     @db.VarChar(255)
  reason      String?    @db.VarChar(255)
  expires_at  DateTime?
}

model LoginToken {
  id         String   @id @default(cuid())
  token      String   @unique
  created_at DateTime
}
